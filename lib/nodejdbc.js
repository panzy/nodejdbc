// Generated by CoffeeScript 1.10.0
(function() {
  var Connection, NodeJDBC, Promise, _, java;

  Promise = require('bluebird');

  Connection = require('./connection');

  _ = require('lodash');

  java = Promise.promisifyAll(require('java'));

  module.exports = NodeJDBC = (function() {
    NodeJDBC._connection = void 0;

    function NodeJDBC(config) {
      this.config = config;
      this.validateConfig();
      _.each(this.config.libs, function(lib) {
        if (java.classpath.indexOf(lib) < 0) {
          return java.classpath.push.apply(java.classpath, [lib]);
        }
      });
      this.registerDriver();
    }

    NodeJDBC.prototype.newConnection = function() {
      var conn;
      conn = java.callStaticMethodAsync('java.sql.DriverManager', 'getConnection', this.config.url, this.config.username, this.config.password);
      return conn.then(function(connection) {
        return new Connection(connection);
      });
    };

    NodeJDBC.prototype.getConnection = function(createIfClosed) {
      var con, me;
      if (createIfClosed == null) {
        createIfClosed = false;
      }
      con = this._connection;
      me = this;
      if (!this._connection) {
        return this._connection = this.newConnection();
      } else {
        return this._connection.then(function(c) {
          if (c.isClosed() && createIfClosed === true) {
            me._connection = me.newConnection();
            return me._connection;
          } else {
            return me._connection;
          }
        });
      }
    };

    NodeJDBC.prototype.createStatement = function() {
      return this.getConnection().then(function(connection) {
        return connection.createStatement();
      });
    };

    NodeJDBC.prototype.classForName = function() {
      return java.newInstanceSync(this.config.className);
    };

    NodeJDBC.prototype.registerDriver = function() {
      var driver;
      driver = this.classForName();
      return java.callStaticMethodSync('java.sql.DriverManager', 'registerDriver', driver);
    };

    NodeJDBC.prototype.validateConfig = function() {
      if (!this.config) {
        throw 'Missing configuration ...';
      } else if (!this.config.libs || _.isEmpty(this.config.libs)) {
        throw 'Missing libraries ...';
      }
      if (_.isEmpty(this.config.className)) {
        throw 'Missing driver class';
      }
    };

    NodeJDBC.prototype.printConfig = function() {
      return console.log(this.config);
    };

    return NodeJDBC;

  })();

}).call(this);
